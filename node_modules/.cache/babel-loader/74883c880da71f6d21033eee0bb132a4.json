{"ast":null,"code":"// export {}\nimport {\n/*createSlice, nanoid,*/\ncreateAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { useState } from 'react';\nconst init = [];\nconst [state, setState] = useState(init);\nconst URL = 'http://www.filltext.com/?rows=10&fname={firstName}&lname={lastName}&pretty=true';\nexport const fetchData = createAsyncThunk('fetchData', async () => {\n  const response = await axios.get(URL, {\n    headers: {\n      'Accept': 'application/json'\n    }\n  });\n  const data_clean = response.data.map(item => {\n    return {\n      person: item.fname + ' ' + item.lname\n    };\n  });\n  let res = [];\n\n  for (let i = 0; i < data_clean.length; i++) res.push(data_clean[i].person);\n\n  setState(res);\n}); //   async function fetchData() {\n// \tconst response = await fetch(URL);\n// \tconst json = await response.json();\n// \tconst data_clean: cleanData = json.map((item: titem) => {\n// \t  return {person: item.fname + ' ' + item.lname}\n// \t});\n// \tlet res: string[] = [];\n// \tfor (let i = 0; i < data_clean.length; i++)\n// \t  res.push(data_clean[i].person)\n// \tsetState(res);\n//   }","map":{"version":3,"names":["createAsyncThunk","axios","useState","init","state","setState","URL","fetchData","response","get","headers","data_clean","data","map","item","person","fname","lname","res","i","length","push"],"sources":["/Users/alinoki/Desktop/my-app/src/store/productListSlice.ts"],"sourcesContent":["// export {}\nimport { /*createSlice, nanoid,*/ createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport {titem, Data, cleanData} from './types'\nimport { useState } from 'react';\n\nconst init: string[] = [];\nconst [state, setState] = useState(init);\nconst URL: string = 'http://www.filltext.com/?rows=10&fname={firstName}&lname={lastName}&pretty=true'\n\nexport const fetchData = createAsyncThunk('fetchData', async () => {\n\tconst response = await axios.get(\n\t  URL,{\n\t\theaders: {\n\t\t  'Accept': 'application/json'\n\t\t}\n\t  }\n\t);\n\tconst data_clean: cleanData = response.data.map((item: titem) => {\n\t\treturn {person: item.fname + ' ' + item.lname}\n\t  });\n\t  let res: string[] = [];\n\t  for (let i = 0; i < data_clean.length; i++)\n\t\tres.push(data_clean[i].person)\n\tsetState(res);\n  });\n\n\n//   async function fetchData() {\n// \tconst response = await fetch(URL);\n// \tconst json = await response.json();\n// \tconst data_clean: cleanData = json.map((item: titem) => {\n// \t  return {person: item.fname + ' ' + item.lname}\n// \t});\n// \tlet res: string[] = [];\n// \tfor (let i = 0; i < data_clean.length; i++)\n// \t  res.push(data_clean[i].person)\n// \tsetState(res);\n//   }"],"mappings":"AAAA;AACA;AAAS;AAAyBA,gBAAlC,QAA0D,kBAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,MAAMC,IAAc,GAAG,EAAvB;AACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAACC,IAAD,CAAlC;AACA,MAAMG,GAAW,GAAG,iFAApB;AAEA,OAAO,MAAMC,SAAS,GAAGP,gBAAgB,CAAC,WAAD,EAAc,YAAY;EAClE,MAAMQ,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CACrBH,GADqB,EACjB;IACLI,OAAO,EAAE;MACP,UAAU;IADH;EADJ,CADiB,CAAvB;EAOA,MAAMC,UAAqB,GAAGH,QAAQ,CAACI,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAiB;IAChE,OAAO;MAACC,MAAM,EAAED,IAAI,CAACE,KAAL,GAAa,GAAb,GAAmBF,IAAI,CAACG;IAAjC,CAAP;EACE,CAF2B,CAA9B;EAGE,IAAIC,GAAa,GAAG,EAApB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,UAAU,CAACS,MAA/B,EAAuCD,CAAC,EAAxC,EACDD,GAAG,CAACG,IAAJ,CAASV,UAAU,CAACQ,CAAD,CAAV,CAAcJ,MAAvB;;EACDV,QAAQ,CAACa,GAAD,CAAR;AACE,CAfsC,CAAlC,C,CAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}