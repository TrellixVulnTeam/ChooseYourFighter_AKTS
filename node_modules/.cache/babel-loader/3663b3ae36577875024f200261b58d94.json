{"ast":null,"code":"import {\n/*createSlice, nanoid,*/\ncreateAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const fetchProductList = createAsyncThunk('productList/fetchProductList', async () => {\n  const response = await axios.get('https://petstore.swagger.io/v2/pet/findByStatus?status=available', {\n    headers: {\n      'Accept': 'application/json'\n    }\n  });\n  return response.data.productList;\n});\nconsole.log(fetchProductList.toString()); //   export const productListSlice = createSlice({\n// \tname: 'productList',\n// \tinitialState: {\n// \t  todoList: [],\n// \t  status: 'idle',\n// \t  error: null,\n// \t},\n// \treducers: {\n//   addProduct: {\n// \treducer: (state, action) => {\n// \t  state.todoList.push(...action.payload);\n// \t},\n// \tprepare(value) {\n// \t  return {\n// \t\tpayload: {\n// \t\t  key: nanoid(),\n// \t\t  value: value,\n// \t\t},\n// \t  };\n// \t},\n//   },\n// },\n// extraReducers: {\n//   [fetchProductList.pending]: (state, action) => {\n// \tstate.status = 'loading';\n//   },\n//   [fetchProductList.fulfilled]: (state, action) => {\n// \tstate.status = 'succeeded';\n// \tstate.todoList.push(...action.payload);\n//   },\n//   [fetchProductList.rejected]: (state, action) => {\n// \tstate.status = 'failed';\n// \tstate.error = action.error.message;\n//   },\n// \t},\n//   });","map":{"version":3,"names":["createAsyncThunk","axios","fetchProductList","response","get","headers","data","productList","console","log","toString"],"sources":["/Users/alinoki/Desktop/my-app/src/store/productListSlice.ts"],"sourcesContent":["import { /*createSlice, nanoid,*/ createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchProductList = createAsyncThunk('productList/fetchProductList', async () => {\n\tconst response = await axios.get(\n\t  'https://petstore.swagger.io/v2/pet/findByStatus?status=available',{\n\t\theaders: {\n\t\t  'Accept': 'application/json'\n\t\t}\n\t  }\n\t);\n\treturn response.data.productList;\n  });\n\n  console.log(fetchProductList.toString());\n//   export const productListSlice = createSlice({\n// \tname: 'productList',\n// \tinitialState: {\n// \t  todoList: [],\n// \t  status: 'idle',\n// \t  error: null,\n// \t},\n// \treducers: {\n\t//   addProduct: {\n\t// \treducer: (state, action) => {\n\t// \t  state.todoList.push(...action.payload);\n\t// \t},\n\t// \tprepare(value) {\n\t// \t  return {\n\t// \t\tpayload: {\n\t// \t\t  key: nanoid(),\n\t// \t\t  value: value,\n\t// \t\t},\n\t// \t  };\n\t// \t},\n\t//   },\n\t// },\n\t// extraReducers: {\n\t//   [fetchProductList.pending]: (state, action) => {\n\t// \tstate.status = 'loading';\n\t//   },\n\t//   [fetchProductList.fulfilled]: (state, action) => {\n\t// \tstate.status = 'succeeded';\n\t// \tstate.todoList.push(...action.payload);\n\t//   },\n\t//   [fetchProductList.rejected]: (state, action) => {\n\t// \tstate.status = 'failed';\n\t// \tstate.error = action.error.message;\n\t//   },\n// \t},\n//   });"],"mappings":"AAAA;AAAS;AAAyBA,gBAAlC,QAA0D,kBAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,gBAAgB,GAAGF,gBAAgB,CAAC,8BAAD,EAAiC,YAAY;EAC5F,MAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CACrB,kEADqB,EAC8C;IACpEC,OAAO,EAAE;MACP,UAAU;IADH;EAD2D,CAD9C,CAAvB;EAOA,OAAOF,QAAQ,CAACG,IAAT,CAAcC,WAArB;AACE,CAT6C,CAAzC;AAWLC,OAAO,CAACC,GAAR,CAAYP,gBAAgB,CAACQ,QAAjB,EAAZ,E,CACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACA"},"metadata":{},"sourceType":"module"}